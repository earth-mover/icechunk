# This is mostly copied from the rust-analyzer repo
# https://github.com/rust-lang/rust-analyzer/blob/12e7aa3132217cc6a6c1151d468be35d7b365999/.github/workflows/ci.yaml

name: Rust CI
on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - main
  schedule:
    # three times a day to run the integration tests that take a long time
    - cron:  '33 3,10,15 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CI: 1
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings -W unreachable-pub -W bare-trait-objects"
  RUSTUP_MAX_RETRIES: 10
  RUST_CHANNEL: '1.89.0'

jobs:
  rust-safe:
    name: Rust CI (Safe Tests)
    timeout-minutes: 20
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-13, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Stand up docker services
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm'
        run: |
          docker compose up -d

      - name: Wait for containers to be ready
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm'
        run: |
          for _ in {1..30}; do
              if curl --silent --fail http://localhost:9000/minio/health/live; then
              break
              fi
              sleep 1
          done
          docker compose exec -T minio mc alias set minio http://minio:9000 minio123 minio123
          for _ in {1..60}; do
              if curl --silent --fail "http://localhost:10000/devstoreaccount1/testcontainer?sv=2023-01-03&ss=btqf&srt=sco&spr=https%2Chttp&st=2025-01-06T14%3A53%3A30Z&se=2035-01-07T14%3A53%3A00Z&sp=rwdftlacup&sig=jclETGilOzONYp4Y0iK9SpVRLGyehaS5lg5booJ9VYA%3D&restype=container"; then
              break
              fi
              sleep 1
          done

      - name: Install Just
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm'
        run: sudo snap install --edge --classic just

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update ${{ env.RUST_CHANNEL }}
          rustup component add --toolchain ${{ env.RUST_CHANNEL }} rustfmt rust-src clippy
          rustup default ${{ env.RUST_CHANNEL }}

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # workspaces: "rust -> target"
          key: ${{ env.RUST_CHANNEL }}

      - name: Run safe tests
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm'
        run: |
          just compile-tests "--locked"
          just test  # Runs all tests except #[ignore] ones (safe: unit tests + MinIO/Azurite)

      - name: Run doc tests
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm'
        run: |
          just doctest

      - name: Run examples
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm'
        run: |
          just run-all-examples

      - name: Run unit tests only
        if: matrix.os != 'ubuntu-latest' && matrix.os != 'ubuntu-24.04-arm'
        run: |
          cargo test --lib

  rust-external-services:
    name: Rust CI (External Services)
    timeout-minutes: 30
    runs-on: ubuntu-latest
    if: github.event_name == 'cron' || github.event_name == 'pull_request' || github.event_name == 'push'
    # Apply environment protection only for external PRs
    environment: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository && 'ci-with-secrets' }}
    defaults:
      run:
        working-directory: ./

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Install Just
        run: sudo snap install --edge --classic just

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update ${{ env.RUST_CHANNEL }}
          rustup component add --toolchain ${{ env.RUST_CHANNEL }} rustfmt rust-src clippy
          rustup default ${{ env.RUST_CHANNEL }}

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ env.RUST_CHANNEL }}

      - name: Debug PR context
        run: |
          echo "=== PR Context Debug ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Head repo: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "Base repo: ${{ github.repository }}"
          echo "Is external PR: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository }}"
          echo "Environment should be: ${{ (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository) && 'ci-with-secrets' || 'null' }}"
          echo "Current environment: ${GITHUB_ENVIRONMENT:-none}"
          echo "Job URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Check environment variables
        env:
          DEBUG_VAR: "DEBUG"
          R2_BUCKET: ${{ vars.R2_BUCKET }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          AWS_BUCKET: ${{ vars.S3_BUCKET }}
          AWS_REGION: ${{ vars.S3_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TIGRIS_BUCKET: ${{ vars.TIGRIS_BUCKET }}
          TIGRIS_REGION: ${{ vars.TIGRIS_REGION }}
          TIGRIS_ACCESS_KEY_ID: ${{ secrets.TIGRIS_ACCESS_KEY_ID }}
          TIGRIS_SECRET_ACCESS_KEY: ${{ secrets.TIGRIS_SECRET_ACCESS_KEY }}
        run: |
          echo "=== Environment Variables Status ==="
          echo "DEBUG_VAR: '${DEBUG_VAR}' - using \${VAR:+SET}: '${DEBUG_VAR:+SET}' - using \${VAR:-UNSET}: '${DEBUG_VAR:-UNSET}'"
          echo "R2_BUCKET: '${R2_BUCKET}' - Status: ${R2_BUCKET:+SET}${R2_BUCKET:-UNSET}"
          echo "R2_ACCESS_KEY_ID: Status: ${R2_ACCESS_KEY_ID:+SET}${R2_ACCESS_KEY_ID:-UNSET}"
          echo "R2_SECRET_ACCESS_KEY: Status: ${R2_SECRET_ACCESS_KEY:+SET}${R2_SECRET_ACCESS_KEY:-UNSET}"
          echo "R2_ACCOUNT_ID: Status: ${R2_ACCOUNT_ID:+SET}${R2_ACCOUNT_ID:-UNSET}"
          echo "AWS_BUCKET: '${AWS_BUCKET}' - Status: ${AWS_BUCKET:+SET}${AWS_BUCKET:-UNSET}"
          echo "AWS_REGION: '${AWS_REGION}' - Status: ${AWS_REGION:+SET}${AWS_REGION:-UNSET}"
          echo "AWS_ACCESS_KEY_ID: Status: ${AWS_ACCESS_KEY_ID:+SET}${AWS_ACCESS_KEY_ID:-UNSET}"
          echo "AWS_SECRET_ACCESS_KEY: Status: ${AWS_SECRET_ACCESS_KEY:+SET}${AWS_SECRET_ACCESS_KEY:-UNSET}"
          echo "TIGRIS_BUCKET: '${TIGRIS_BUCKET}' - Status: ${TIGRIS_BUCKET:+SET}${TIGRIS_BUCKET:-UNSET}"
          echo "TIGRIS_REGION: '${TIGRIS_REGION}' - Status: ${TIGRIS_REGION:+SET}${TIGRIS_REGION:-UNSET}"
          echo "TIGRIS_ACCESS_KEY_ID: Status: ${TIGRIS_ACCESS_KEY_ID:+SET}${TIGRIS_ACCESS_KEY_ID:-UNSET}"
          echo "TIGRIS_SECRET_ACCESS_KEY: Status: ${TIGRIS_SECRET_ACCESS_KEY:+SET}${TIGRIS_SECRET_ACCESS_KEY:-UNSET}"

      - name: Run external service tests
        env:
          RUST_LOG: trace
          R2_BUCKET: ${{ vars.R2_BUCKET }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          AWS_BUCKET: ${{ vars.S3_BUCKET }}
          AWS_REGION: ${{ vars.S3_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TIGRIS_BUCKET: ${{ vars.TIGRIS_BUCKET }}
          TIGRIS_REGION: ${{ vars.TIGRIS_REGION }}
          TIGRIS_ACCESS_KEY_ID: ${{ secrets.TIGRIS_ACCESS_KEY_ID }}
          TIGRIS_SECRET_ACCESS_KEY: ${{ secrets.TIGRIS_SECRET_ACCESS_KEY }}
        run: |
          if [[ "${{ github.event_name }}" == "cron" ]]; then
            echo "Running comprehensive integration tests for cron job"
            cargo test --package icechunk -- --ignored
          else
            echo "Running targeted external service tests"
            cargo test --package icechunk "_in_aws" -- --ignored
            cargo test --package icechunk "_in_r2" -- --ignored
            cargo test --package icechunk "_in_tigris" -- --ignored
          fi
