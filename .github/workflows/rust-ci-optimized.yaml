name: Rust CI (Optimized)

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled]
  push:
    branches:
      - main
  schedule:
    # Three times a day to run the integration tests that take a long time
    - cron: '33 3,10,15 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_CHANNEL: '1.89.0'
  CARGO_DENY_VERSION: '0.18.4'

jobs:
  # Build artifacts once and share across test jobs
  build:
    name: Build Rust Artifacts
    uses: ./.github/workflows/shared-build.yaml
    with:
      rust_channel: '1.89.0'
      upload_rust_artifacts: true
      runner: ubuntu-latest

  # Setup shared infrastructure
  infrastructure:
    name: Setup Test Infrastructure
    uses: ./.github/workflows/shared-build.yaml
    with:
      rust_channel: '1.89.0'
      upload_rust_artifacts: false
      runner: ubuntu-latest

  # Main test job - depends on build and infrastructure
  test_main:
    name: Test (Ubuntu Latest)
    runs-on: ubuntu-latest
    needs: [build, infrastructure]
    env:
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
      AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TIGRIS_BUCKET: ${{ secrets.TIGRIS_BUCKET }}
      TIGRIS_REGION: ${{ secrets.TIGRIS_REGION }}
      TIGRIS_ACCESS_KEY_ID: ${{ secrets.TIGRIS_ACCESS_KEY_ID }}
      TIGRIS_SECRET_ACCESS_KEY: ${{ secrets.TIGRIS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Download pre-built artifacts instead of rebuilding
      - name: Download Rust artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-artifacts-x86_64
          path: target/

      # Restore Docker containers if available
      - name: Restore Docker cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker_cache
          key: docker-containers-${{ hashFiles('**/docker-compose.yml', '**/Dockerfile') }}-${{ github.run_id }}
          restore-keys: |
            docker-containers-${{ hashFiles('**/docker-compose.yml', '**/Dockerfile') }}-

      - name: Load Docker images
        run: |
          if [ -f /tmp/docker_cache/images.tar ]; then
            docker load < /tmp/docker_cache/images.tar
          fi

      - name: Stand up docker services
        run: docker compose up -d

      - name: Wait for containers to be ready
        run: |
          for _ in {1..10}; do
              if curl --silent --fail http://minio:9000/minio/health/live; then
              break
              fi
              sleep 3
          done
          docker compose exec -T minio mc alias set minio http://minio:9000 minio123 minio123
          for _ in {1..20}; do
              if curl --silent --fail "http://azurite:10000/devstoreaccount1/testcontainer?sv=2023-01-03&ss=btqf&srt=sco&spr=https%2Chttp&st=2025-01-06T14%3A53%3A30Z&se=2035-01-07T14%3A53%3A00Z&sp=rwdftlacup&sig=jclETGilOzONYp4Y0iK9SpVRLGyehaS5lg5booJ9VYA%3D&restype=container"; then
              break
              fi
              sleep 3
          done

      - name: Install Just
        run: sudo snap install --edge --classic just

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update ${{ env.RUST_CHANNEL }}
          rustup component add --toolchain ${{ env.RUST_CHANNEL }} rustfmt rust-src clippy
          rustup default ${{ env.RUST_CHANNEL }}

      # Use Swatinem rust-cache for optimal Rust caching
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ env.RUST_CHANNEL }}-test-main
          cache-all-crates: true
          cache-on-failure: true

      - name: Install cargo-deny
        run: cargo install --locked cargo-deny --version ${{ env.CARGO_DENY_VERSION }}

      - name: Run pre-commit checks
        run: just pre-commit-ci

  # Cross-platform test jobs that only run unit tests (no integration tests)
  test_cross_platform:
    name: Cross-platform Tests
    runs-on: ${{ matrix.os }}
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04-arm, macos-13, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Download pre-built artifacts if same architecture
      - name: Download Rust artifacts
        if: matrix.os == 'ubuntu-24.04-arm'
        uses: actions/download-artifact@v4
        with:
          name: rust-artifacts-x86_64
          path: target/

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update ${{ env.RUST_CHANNEL }}
          rustup component add --toolchain ${{ env.RUST_CHANNEL }} rustfmt rust-src clippy
          rustup default ${{ env.RUST_CHANNEL }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ env.RUST_CHANNEL }}-${{ matrix.os }}
          cache-all-crates: true
          cache-on-failure: true

      # Only run unit tests on cross-platform builds
      - name: Run unit tests
        run: cargo test --lib

  # Windows-specific test job
  test_windows:
    name: Windows Tests
    runs-on: windows-latest
    needs: [build]
    env:
      RUST_CHANNEL: '1.89.0'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update ${{ env.RUST_CHANNEL }}
          rustup component add --toolchain ${{ env.RUST_CHANNEL }} rustfmt rust-src clippy
          rustup default ${{ env.RUST_CHANNEL }}

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: windows-${{ env.RUST_CHANNEL }}
          cache-all-crates: true
          cache-on-failure: true

      - name: Run unit tests
        run: cargo test --lib

  # Integration tests only run on schedule
  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build, infrastructure]
    if: github.event_name == 'schedule'
    env:
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
      AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TIGRIS_BUCKET: ${{ secrets.TIGRIS_BUCKET }}
      TIGRIS_REGION: ${{ secrets.TIGRIS_REGION }}
      TIGRIS_ACCESS_KEY_ID: ${{ secrets.TIGRIS_ACCESS_KEY_ID }}
      TIGRIS_SECRET_ACCESS_KEY: ${{ secrets.TIGRIS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Download pre-built artifacts
      - name: Download Rust artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-artifacts-x86_64
          path: target/

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update ${{ env.RUST_CHANNEL }}
          rustup component add --toolchain ${{ env.RUST_CHANNEL }} rustfmt rust-src clippy
          rustup default ${{ env.RUST_CHANNEL }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ env.RUST_CHANNEL }}-integration
          cache-all-crates: true
          cache-on-failure: true

      - name: Run integration tests
        run: cargo test --all --all-targets -- --ignored
