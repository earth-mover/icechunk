name: Rust Testing (Safe)

on:
  workflow_call:
    inputs:
      target:
        description: 'Target architecture (x86_64, aarch64)'
        required: false
        type: string
        default: 'x86_64'
      runner:
        description: 'GitHub runner to use'
        required: false
        type: string
        default: 'ubuntu-latest'
      include_docker_tests:
        description: 'Whether to include Docker-based tests'
        required: false
        type: boolean
        default: false
      rust_channel:
        description: 'Rust channel to use'
        required: false
        type: string
        default: '1.89.0'

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CI: 1
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings -W unreachable-pub -W bare-trait-objects"
  RUSTUP_MAX_RETRIES: 10
  RUST_CHANNEL: ${{ inputs.rust_channel }}
  CARGO_DENY_VERSION: '0.18.4'

jobs:
  test:
    name: Safe Rust Tests (${{ inputs.target }})
    runs-on: ${{ inputs.runner }}
    # Safe for all contributors (no cloud credentials)

    services:
      minio:
        image: minio/minio
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minio123
          MINIO_ROOT_PASSWORD: minio123
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --entrypoint "/bin/sh -c 'for bucket in testbucket externalbucket arraylake-repo-bucket; do mkdir -p /data/$$bucket; done && /usr/bin/minio server --console-address :9001 /data'"

      azurite:
        image: mcr.microsoft.com/azure-storage/azurite:3.33.0
        ports:
          - 10000:10000
          - 10001:10001
          - 10002:10002
        options: >-
          --health-cmd "nc 127.0.0.1 10000 -z"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
        env:
          AZURITE_ACCOUNTS: devstoreaccount1:Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Rust artifacts available via Swatinem/rust-cache (no manual download needed)

      - name: Install Just
        if: ${{ inputs.include_docker_tests }}
        run: sudo snap install --edge --classic just

      # Cache rustup toolchain installation
      - name: Cache rustup toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: rustup-${{ runner.os }}-${{ inputs.rust_channel }}
          restore-keys: |
            rustup-${{ runner.os }}-

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update ${{ inputs.rust_channel }}
          rustup component add --toolchain ${{ inputs.rust_channel }} rustfmt rust-src clippy
          rustup default ${{ inputs.rust_channel }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-${{ inputs.rust_channel }}
          cache-all-crates: true
          cache-on-failure: true

      # Initialize test containers and buckets
      - name: Initialize test storage
        if: ${{ inputs.include_docker_tests }}
        run: |
          # Set up minio client
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc alias set minio http://localhost:9000 minio123 minio123

          # Create azurite test container
          curl -X PUT "http://localhost:10000/devstoreaccount1/testcontainer?sv=2023-01-03&ss=btqf&srt=sco&spr=https%2Chttp&st=2025-01-06T14%3A53%3A30Z&se=2035-01-07T14%3A53%3A00Z&sp=rwdftlacup&sig=jclETGilOzONYp4Y0iK9SpVRLGyehaS5lg5booJ9VYA%3D&restype=container"

      # Run safe tests with Docker services (excludes cloud integration tests)
      - name: Run safe tests with Docker
        if: ${{ inputs.include_docker_tests }}
        env:
          CARGO_TERM_COLOR: always
        run: |
          just test-safe

      # Run unit tests only (if no Docker)
      - name: Run unit tests
        if: ${{ !inputs.include_docker_tests }}
        env:
          CARGO_TERM_COLOR: always
        run: cargo test --lib
