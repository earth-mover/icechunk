name: Shared Build Infrastructure

on:
  workflow_call:
    inputs:
      rust_channel:
        description: 'Rust channel to use'
        required: false
        type: string
        default: '1.89.0'
      target:
        description: 'Build target architecture (x86_64, aarch64)'
        required: false
        type: string
        default: 'x86_64'
      runner:
        description: 'GitHub runner to use'
        required: false
        type: string
        default: 'ubuntu-latest'
    outputs:
      rust_cache_hit:
        description: "Whether Rust cache was hit"
        value: ${{ jobs.build.outputs.cache_hit }}

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CI: 1
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings -W unreachable-pub -W bare-trait-objects"
  RUSTUP_MAX_RETRIES: 10

jobs:
  build:
    name: Build & Test Setup
    runs-on: ${{ inputs.runner }}
    outputs:
      cache_hit: ${{ steps.rust_cache.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Cache rustup toolchain installation
      - name: Cache rustup toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: rustup-${{ runner.os }}-${{ inputs.rust_channel }}
          restore-keys: |
            rustup-${{ runner.os }}-

      # Install Rust while Docker starts up
      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update ${{ inputs.rust_channel }}
          rustup component add --toolchain ${{ inputs.rust_channel }} rustfmt rust-src clippy
          rustup default ${{ inputs.rust_channel }}

      - name: Cache Rust dependencies and build artifacts
        id: rust_cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-${{ inputs.rust_channel }}
          cache-all-crates: true
          cache-on-failure: true

      # Build Rust while Docker continues starting
      - name: Build Rust project
        run: |
          cargo build --release --target-dir target

      # Install uv for Python wheel building
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      # Build Python wheel using the Rust artifacts we just built
      - name: Build Python wheel
        uses: PyO3/maturin-action@v1
        with:
          working-directory: icechunk-python
          target: ${{ inputs.target }}
          args: --release --out dist --find-interpreter

      # Upload Python wheel as artifact for reuse in Python testing jobs
      - name: Upload Python wheel
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel-${{ inputs.target }}-${{ inputs.runner }}
          path: icechunk-python/dist/*.whl
          retention-days: 1

      # Build artifacts are cached by Swatinem/rust-cache automatically
