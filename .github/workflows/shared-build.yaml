name: Shared Build Infrastructure

on:
  workflow_call:
    inputs:
      rust_channel:
        description: 'Rust channel to use'
        required: false
        type: string
        default: '1.89.0'
      upload_rust_artifacts:
        description: 'Whether to upload Rust build artifacts'
        required: false
        type: boolean
        default: false
      target:
        description: 'Build target architecture (x86_64, aarch64)'
        required: false
        type: string
        default: 'x86_64'
      runner:
        description: 'GitHub runner to use'
        required: false
        type: string
        default: 'ubuntu-latest'
    outputs:
      rust_cache_hit:
        description: "Whether Rust cache was hit"
        value: ${{ jobs.build.outputs.cache_hit }}

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CI: 1
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings -W unreachable-pub -W bare-trait-objects"
  RUSTUP_MAX_RETRIES: 10

jobs:
  build:
    name: Build & Test Setup
    runs-on: ${{ inputs.runner }}
    outputs:
      cache_hit: ${{ steps.rust_cache.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Cache rustup toolchain installation
      - name: Cache rustup toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: rustup-${{ runner.os }}-${{ inputs.rust_channel }}
          restore-keys: |
            rustup-${{ runner.os }}-

      # Install Rust while Docker starts up
      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update ${{ inputs.rust_channel }}
          rustup component add --toolchain ${{ inputs.rust_channel }} rustfmt rust-src clippy
          rustup default ${{ inputs.rust_channel }}

      - name: Cache Rust dependencies and build artifacts
        id: rust_cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ inputs.rust_channel }}-${{ inputs.target }}-${{ inputs.runner }}
          cache-all-crates: true
          cache-on-failure: true

      # Build Rust while Docker continues starting
      - name: Build Rust project
        run: |
          cargo build --release --target-dir target

      - name: Compress Rust build artifacts
        if: ${{ inputs.upload_rust_artifacts }}
        run: |
          tar -czf rust-target-${{ inputs.target }}-${{ inputs.runner }}.tar.gz target/

      - name: Upload Rust build artifacts
        if: ${{ inputs.upload_rust_artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: rust-artifacts-${{ inputs.target }}-${{ inputs.runner }}
          path: rust-target-${{ inputs.target }}-${{ inputs.runner }}.tar.gz
          retention-days: 1
