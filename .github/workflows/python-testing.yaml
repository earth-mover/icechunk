name: Python Testing

on:
  workflow_call:
    inputs:
      rust_channel:
        description: 'Rust channel to use'
        required: false
        type: string
        default: '1.89.0'
      target:
        description: 'Target architecture (x86_64, aarch64)'
        required: false
        type: string
        default: 'x86_64'
      runner:
        description: 'GitHub runner to use'
        required: false
        type: string
        default: 'ubuntu-latest'

permissions:
  contents: read

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CI: 1
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings -W unreachable-pub -W bare-trait-objects"
  RUSTUP_MAX_RETRIES: 10

jobs:
  test:
    name: Python Tests
    runs-on: ${{ inputs.runner }}
    defaults:
      run:
        working-directory: ./icechunk-python
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Rust dependencies cached by Swatinem/rust-cache (no manual artifacts needed)


      # Cache rustup toolchain installation
      - name: Cache rustup toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: rustup-${{ runner.os }}-${{ inputs.rust_channel }}
          restore-keys: |
            rustup-${{ runner.os }}-

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update ${{ inputs.rust_channel }}
          rustup component add --toolchain ${{ inputs.rust_channel }} rustfmt rust-src clippy
          rustup default ${{ inputs.rust_channel }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ inputs.rust_channel }}-${{ inputs.target }}-${{ inputs.runner }}
          cache-all-crates: true
          cache-on-failure: true

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      # Build wheel using pre-built Rust artifacts
      - name: Build Python wheel
        uses: PyO3/maturin-action@v1
        with:
          working-directory: icechunk-python
          target: ${{ inputs.target }}
          args: --release --out dist --find-interpreter

      # Install and test
      - name: Setup test environment
        working-directory: ./icechunk-python
        run: |
          uv venv
          uv pip install dist/*.whl
          uv pip install pytest pytest-asyncio

      - name: Run Python tests
        working-directory: ./icechunk-python
        run: |
          uv run pytest python/
