// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod generated {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

// struct ObjectId12, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct ObjectId12(pub [u8; 12]);
impl Default for ObjectId12 { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl core::fmt::Debug for ObjectId12 {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("ObjectId12")
      .field("bytes", &self.bytes())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ObjectId12 {}
impl<'a> flatbuffers::Follow<'a> for ObjectId12 {
  type Inner = &'a ObjectId12;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a ObjectId12>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a ObjectId12 {
  type Inner = &'a ObjectId12;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<ObjectId12>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for ObjectId12 {
    type Output = ObjectId12;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const ObjectId12 as *const u8, <Self as flatbuffers::Push>::size());
        dst.copy_from_slice(src);
    }
    #[inline]
    fn alignment() -> flatbuffers::PushAlignment {
        flatbuffers::PushAlignment::new(1)
    }
}

impl<'a> flatbuffers::Verifiable for ObjectId12 {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> ObjectId12 {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    bytes: &[u8; 12],
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_bytes(bytes);
    s
  }

  pub fn bytes(&'a self) -> flatbuffers::Array<'a, u8, 12> {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid array in this slot
    unsafe { flatbuffers::Array::follow(&self.0, 0) }
  }

  pub fn set_bytes(&mut self, items: &[u8; 12]) {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid array in this slot
    unsafe { flatbuffers::emplace_scalar_array(&mut self.0, 0, items) };
  }

}

// struct ObjectId8, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct ObjectId8(pub [u8; 8]);
impl Default for ObjectId8 { 
  fn default() -> Self { 
    Self([0; 8])
  }
}
impl core::fmt::Debug for ObjectId8 {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("ObjectId8")
      .field("bytes", &self.bytes())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ObjectId8 {}
impl<'a> flatbuffers::Follow<'a> for ObjectId8 {
  type Inner = &'a ObjectId8;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a ObjectId8>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a ObjectId8 {
  type Inner = &'a ObjectId8;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<ObjectId8>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for ObjectId8 {
    type Output = ObjectId8;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const ObjectId8 as *const u8, <Self as flatbuffers::Push>::size());
        dst.copy_from_slice(src);
    }
    #[inline]
    fn alignment() -> flatbuffers::PushAlignment {
        flatbuffers::PushAlignment::new(1)
    }
}

impl<'a> flatbuffers::Verifiable for ObjectId8 {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> ObjectId8 {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    bytes: &[u8; 8],
  ) -> Self {
    let mut s = Self([0; 8]);
    s.set_bytes(bytes);
    s
  }

  pub fn bytes(&'a self) -> flatbuffers::Array<'a, u8, 8> {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid array in this slot
    unsafe { flatbuffers::Array::follow(&self.0, 0) }
  }

  pub fn set_bytes(&mut self, items: &[u8; 8]) {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid array in this slot
    unsafe { flatbuffers::emplace_scalar_array(&mut self.0, 0, items) };
  }

}

pub enum ChunkRefOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ChunkRef<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ChunkRef<'a> {
  type Inner = ChunkRef<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ChunkRef<'a> {
  pub const VT_INDEX: flatbuffers::VOffsetT = 4;
  pub const VT_INLINE: flatbuffers::VOffsetT = 6;
  pub const VT_OFFSET: flatbuffers::VOffsetT = 8;
  pub const VT_LENGTH: flatbuffers::VOffsetT = 10;
  pub const VT_CHUNK_ID: flatbuffers::VOffsetT = 12;
  pub const VT_LOCATION: flatbuffers::VOffsetT = 14;
  pub const VT_CHECKSUM_ETAG: flatbuffers::VOffsetT = 16;
  pub const VT_CHECKSUM_LAST_MODIFIED: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ChunkRef { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ChunkRefArgs<'args>
  ) -> flatbuffers::WIPOffset<ChunkRef<'bldr>> {
    let mut builder = ChunkRefBuilder::new(_fbb);
    builder.add_length(args.length);
    builder.add_offset(args.offset);
    builder.add_checksum_last_modified(args.checksum_last_modified);
    if let Some(x) = args.checksum_etag { builder.add_checksum_etag(x); }
    if let Some(x) = args.location { builder.add_location(x); }
    if let Some(x) = args.chunk_id { builder.add_chunk_id(x); }
    if let Some(x) = args.inline { builder.add_inline(x); }
    if let Some(x) = args.index { builder.add_index(x); }
    builder.finish()
  }


  #[inline]
  pub fn index(&self) -> flatbuffers::Vector<'a, u32> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(ChunkRef::VT_INDEX, None).unwrap()}
  }
  #[inline]
  pub fn inline(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(ChunkRef::VT_INLINE, None)}
  }
  #[inline]
  pub fn offset(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ChunkRef::VT_OFFSET, Some(0)).unwrap()}
  }
  #[inline]
  pub fn length(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ChunkRef::VT_LENGTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn chunk_id(&self) -> Option<&'a ObjectId12> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ObjectId12>(ChunkRef::VT_CHUNK_ID, None)}
  }
  #[inline]
  pub fn location(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ChunkRef::VT_LOCATION, None)}
  }
  #[inline]
  pub fn checksum_etag(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ChunkRef::VT_CHECKSUM_ETAG, None)}
  }
  #[inline]
  pub fn checksum_last_modified(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ChunkRef::VT_CHECKSUM_LAST_MODIFIED, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ChunkRef<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("index", Self::VT_INDEX, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("inline", Self::VT_INLINE, false)?
     .visit_field::<u64>("offset", Self::VT_OFFSET, false)?
     .visit_field::<u64>("length", Self::VT_LENGTH, false)?
     .visit_field::<ObjectId12>("chunk_id", Self::VT_CHUNK_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("location", Self::VT_LOCATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("checksum_etag", Self::VT_CHECKSUM_ETAG, false)?
     .visit_field::<u32>("checksum_last_modified", Self::VT_CHECKSUM_LAST_MODIFIED, false)?
     .finish();
    Ok(())
  }
}
pub struct ChunkRefArgs<'a> {
    pub index: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub inline: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub offset: u64,
    pub length: u64,
    pub chunk_id: Option<&'a ObjectId12>,
    pub location: Option<flatbuffers::WIPOffset<&'a str>>,
    pub checksum_etag: Option<flatbuffers::WIPOffset<&'a str>>,
    pub checksum_last_modified: u32,
}
impl<'a> Default for ChunkRefArgs<'a> {
  #[inline]
  fn default() -> Self {
    ChunkRefArgs {
      index: None, // required field
      inline: None,
      offset: 0,
      length: 0,
      chunk_id: None,
      location: None,
      checksum_etag: None,
      checksum_last_modified: 0,
    }
  }
}

pub struct ChunkRefBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ChunkRefBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_index(&mut self, index: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ChunkRef::VT_INDEX, index);
  }
  #[inline]
  pub fn add_inline(&mut self, inline: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ChunkRef::VT_INLINE, inline);
  }
  #[inline]
  pub fn add_offset(&mut self, offset: u64) {
    self.fbb_.push_slot::<u64>(ChunkRef::VT_OFFSET, offset, 0);
  }
  #[inline]
  pub fn add_length(&mut self, length: u64) {
    self.fbb_.push_slot::<u64>(ChunkRef::VT_LENGTH, length, 0);
  }
  #[inline]
  pub fn add_chunk_id(&mut self, chunk_id: &ObjectId12) {
    self.fbb_.push_slot_always::<&ObjectId12>(ChunkRef::VT_CHUNK_ID, chunk_id);
  }
  #[inline]
  pub fn add_location(&mut self, location: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ChunkRef::VT_LOCATION, location);
  }
  #[inline]
  pub fn add_checksum_etag(&mut self, checksum_etag: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ChunkRef::VT_CHECKSUM_ETAG, checksum_etag);
  }
  #[inline]
  pub fn add_checksum_last_modified(&mut self, checksum_last_modified: u32) {
    self.fbb_.push_slot::<u32>(ChunkRef::VT_CHECKSUM_LAST_MODIFIED, checksum_last_modified, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ChunkRefBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ChunkRefBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ChunkRef<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, ChunkRef::VT_INDEX,"index");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ChunkRef<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ChunkRef");
      ds.field("index", &self.index());
      ds.field("inline", &self.inline());
      ds.field("offset", &self.offset());
      ds.field("length", &self.length());
      ds.field("chunk_id", &self.chunk_id());
      ds.field("location", &self.location());
      ds.field("checksum_etag", &self.checksum_etag());
      ds.field("checksum_last_modified", &self.checksum_last_modified());
      ds.finish()
  }
}
pub enum ArrayManifestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ArrayManifest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ArrayManifest<'a> {
  type Inner = ArrayManifest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ArrayManifest<'a> {
  pub const VT_NODE_ID: flatbuffers::VOffsetT = 4;
  pub const VT_REFS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ArrayManifest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ArrayManifestArgs<'args>
  ) -> flatbuffers::WIPOffset<ArrayManifest<'bldr>> {
    let mut builder = ArrayManifestBuilder::new(_fbb);
    if let Some(x) = args.refs { builder.add_refs(x); }
    if let Some(x) = args.node_id { builder.add_node_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn node_id(&self) -> &'a ObjectId8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ObjectId8>(ArrayManifest::VT_NODE_ID, None).unwrap()}
  }
  #[inline]
  pub fn refs(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ChunkRef<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ChunkRef>>>>(ArrayManifest::VT_REFS, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for ArrayManifest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<ObjectId8>("node_id", Self::VT_NODE_ID, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ChunkRef>>>>("refs", Self::VT_REFS, true)?
     .finish();
    Ok(())
  }
}
pub struct ArrayManifestArgs<'a> {
    pub node_id: Option<&'a ObjectId8>,
    pub refs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ChunkRef<'a>>>>>,
}
impl<'a> Default for ArrayManifestArgs<'a> {
  #[inline]
  fn default() -> Self {
    ArrayManifestArgs {
      node_id: None, // required field
      refs: None, // required field
    }
  }
}

pub struct ArrayManifestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ArrayManifestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_node_id(&mut self, node_id: &ObjectId8) {
    self.fbb_.push_slot_always::<&ObjectId8>(ArrayManifest::VT_NODE_ID, node_id);
  }
  #[inline]
  pub fn add_refs(&mut self, refs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ChunkRef<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArrayManifest::VT_REFS, refs);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ArrayManifestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ArrayManifestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ArrayManifest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, ArrayManifest::VT_NODE_ID,"node_id");
    self.fbb_.required(o, ArrayManifest::VT_REFS,"refs");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ArrayManifest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ArrayManifest");
      ds.field("node_id", &self.node_id());
      ds.field("refs", &self.refs());
      ds.finish()
  }
}
pub enum ManifestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Manifest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Manifest<'a> {
  type Inner = Manifest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Manifest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_ARRAYS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Manifest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ManifestArgs<'args>
  ) -> flatbuffers::WIPOffset<Manifest<'bldr>> {
    let mut builder = ManifestBuilder::new(_fbb);
    if let Some(x) = args.arrays { builder.add_arrays(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> &'a ObjectId12 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ObjectId12>(Manifest::VT_ID, None).unwrap()}
  }
  #[inline]
  pub fn arrays(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ArrayManifest<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ArrayManifest>>>>(Manifest::VT_ARRAYS, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for Manifest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<ObjectId12>("id", Self::VT_ID, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ArrayManifest>>>>("arrays", Self::VT_ARRAYS, true)?
     .finish();
    Ok(())
  }
}
pub struct ManifestArgs<'a> {
    pub id: Option<&'a ObjectId12>,
    pub arrays: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ArrayManifest<'a>>>>>,
}
impl<'a> Default for ManifestArgs<'a> {
  #[inline]
  fn default() -> Self {
    ManifestArgs {
      id: None, // required field
      arrays: None, // required field
    }
  }
}

pub struct ManifestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ManifestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: &ObjectId12) {
    self.fbb_.push_slot_always::<&ObjectId12>(Manifest::VT_ID, id);
  }
  #[inline]
  pub fn add_arrays(&mut self, arrays: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ArrayManifest<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Manifest::VT_ARRAYS, arrays);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ManifestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ManifestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Manifest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Manifest::VT_ID,"id");
    self.fbb_.required(o, Manifest::VT_ARRAYS,"arrays");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Manifest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Manifest");
      ds.field("id", &self.id());
      ds.field("arrays", &self.arrays());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Manifest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_manifest_unchecked`.
pub fn root_as_manifest(buf: &[u8]) -> Result<Manifest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Manifest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Manifest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_manifest_unchecked`.
pub fn size_prefixed_root_as_manifest(buf: &[u8]) -> Result<Manifest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Manifest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Manifest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_manifest_unchecked`.
pub fn root_as_manifest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Manifest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Manifest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Manifest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_manifest_unchecked`.
pub fn size_prefixed_root_as_manifest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Manifest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Manifest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Manifest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Manifest`.
pub unsafe fn root_as_manifest_unchecked(buf: &[u8]) -> Manifest {
  flatbuffers::root_unchecked::<Manifest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Manifest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Manifest`.
pub unsafe fn size_prefixed_root_as_manifest_unchecked(buf: &[u8]) -> Manifest {
  flatbuffers::size_prefixed_root_unchecked::<Manifest>(buf)
}
#[inline]
pub fn finish_manifest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Manifest<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_manifest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Manifest<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod generated

